IF
	"PC: " << ifstage.get_pc() 
	Memoria de instrucoes (strings) - address de 4 em 4. numero de instrucoes dados por get_n_instructions()
		set_address(int val)
		read()


	"pcSrc:" << ifstage.get_pcSrc()

IFID
	"IR: " << ifid.getIR() 
	"NPC: " << ifid.getNPC()

ID
	Banco de Registradores (32 registradores)
		banco.read_reg1(int reg)


IDEXE
	"IR": << ifid.getIR() 
	"NPC": << ifid.getNPC()
	"Imm" << idexe.getImm() 
	"RD " << idexe.getRD() 
	"RT: " << idexe.getRT()
  	"A: " << idexe.getA() 
  	"B: " << idexe.getB() 
  	Sinais:
  	  "RegDest: " << idexe.getRegDest() 
  	  "RegWrite: " << idexe.getRegWrite() 
  	  "AluSrc: " << idexe.getAluSrc() 
  	  "Branch: " << idexe.getBranch() 
  	  "MemRead: " << idexe.getMemRead() 
  	  "MemWrite: " << idexe.getMemWrite() 
  	  "MemToReg: " << idexe.getMemToReg()
  	  "AluOP: " << idexe.getAluOP() 


EXMEM
	"branch address: "<< exmem.get_branch_address()
	"alu_zero: "<< exmem.get_alu_zero()
	"alu_out: "<< exmem.get_alu_out()
	"alu_in2: " << exmem.get_alu_in2()
	"write_reg_address: " << exmem.get_write_reg_address()
	"reg_write: " << exmem.get_reg_write()
	"branch: " << exmem.get_branch()
	"mem_read: "<< exmem.get_mem_read()
	"mem_write:" << exmem.get_mem_write()
	"mem_to_reg:" << exmem.get_mem_to_reg()

MEM
	Memoria de Dados


MEMWB
	"ALUOut : " << memwb.getALUOut()
    "LMemoryData : " << memwb.getLMemoryData()
  	"RegWrite : " << memwb.getRegWrite()
	"MemtoReg : " << memwb.getMemtoReg()
 	"reg_address : " << memwb.get_reg_address()